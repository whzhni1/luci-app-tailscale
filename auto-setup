#!/bin/sh /etc/rc.common

START=99
STOP=01

# ==================== 用户配置区 ====================
# 安装优先级：1=优先官方源 其他=优先Gitee
INSTALL_PRIORITY=1

# 软件包列表
PACKAGES="luci-app-abc luci-app-wechatpush luci-app-passwall luci-app-openlist luci-app-filemanager luci-i18n-package-manager-zh-cn luci-i18n-firewall-zh-cn vsftpd openssh-sftp-server luci-app-ttyd luci-app-lucky luci-app-tailscale luci-theme-aurora"

# Gitee 仓库所有者列表（按优先级顺序尝试）
GITEE_OWNERS="whzhni sirpdboy kiddin9"

# 自动更新脚本配置
AUTO_UPDATE=1  # 1=启用, 0=禁用
UPDATE_PATH="/usr/bin/auto-update.sh"
UPDATE_MIRRORS="https://gitee.com https://raw.gitcode.com"  # 镜像地址（按优先级）
UPDATE_SCRIPT="/whzhni/luci-app-tailscale/raw/main/auto-update.sh"  # 脚本路径
CRON_TIME="0 3 * * *"  # 定时任务时间（默认每天凌晨3点）
# ====================================================

# ==================== 内部变量区 ====================
LOG_FILE="/tmp/auto-setup-$(date +%Y%m%d-%H%M%S).log"
SYS_ARCH=""
USER_AGENT="Mozilla/5.0 (compatible; OpenWrt-AutoSetup/1.0)"
API_TPL="https://gitee.com/api/v5/repos/%s/releases/latest"

# 待安装包列表
PENDING_PACKAGES=""
FAILED_PACKAGES=""
# ====================================================

# 日志函数
log() {
    local msg="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "$msg" | tee -a "$LOG_FILE"
    logger -t "auto-setup" "[AUTO-SETUP] $1"
}

# 初始化系统架构
init_arch() {
    if [ -z "$SYS_ARCH" ]; then
        local arch=$(uname -m)
        case "$arch" in
            aarch64)   SYS_ARCH="arm64" ;;
            armv7l)    SYS_ARCH="armv7" ;;
            armv6l)    SYS_ARCH="armv6" ;;
            armv5tel)  SYS_ARCH="armv5" ;;
            x86_64)    SYS_ARCH="x86_64" ;;
            i686|i386) SYS_ARCH="i386" ;;
            mips)      SYS_ARCH="mips" ;;
            mipsel)    SYS_ARCH="mipsle" ;;
            riscv64)   SYS_ARCH="riscv64" ;;
            *)         SYS_ARCH="unknown" ;;
        esac
        log "系统架构: $SYS_ARCH"
    fi
}

# 删除自己并设置自动更新
remove_self() {
    log "======================================" 
    log "准备清理自动配置脚本..."
    
    if [ "$AUTO_UPDATE" = "1" ]; then
        log "启用自动更新功能..."
        mkdir -p /usr/bin/
        
        local update_downloaded=0
        
        # 循环尝试多个镜像
        for mirror in $UPDATE_MIRRORS; do
            local url="${mirror}${UPDATE_SCRIPT}"
            
            log "尝试下载: $url"
            if curl -fsSL "$url" -o "$UPDATE_PATH" && \
               [ -f "$UPDATE_PATH" ] && [ -s "$UPDATE_PATH" ]; then
                log "✓ 下载成功"
                update_downloaded=1
                break
            else
                log "✗ 下载失败"
                rm -f "$UPDATE_PATH"
            fi
        done
        
        # 处理下载结果
        if [ "$update_downloaded" = "1" ]; then
            # 修改下载的脚本中的INSTALL_PRIORITY值
            sed -i "s/^INSTALL_PRIORITY=.*/INSTALL_PRIORITY=$INSTALL_PRIORITY/" "$UPDATE_PATH"
            log "✓ 已同步自动更新脚本的安装优先级: $INSTALL_PRIORITY"
            
            chmod +x "$UPDATE_PATH"
            
            # 添加定时任务
            (crontab -l 2>/dev/null | grep -v "$UPDATE_PATH"; \
             echo "$CRON_TIME $UPDATE_PATH") | crontab -
            
            log "✓ 自动更新脚本已安装"
            log "✓ 定时任务已添加: $CRON_TIME"
            log "✓ 立即执行一次自动更新..."
            "$UPDATE_PATH" &
        else
            log "✗ 自动更新脚本下载失败，所有镜像均不可用"
        fi
    else
        log "自动更新功能已禁用"
        
        # 清理定时任务和脚本
        crontab -l 2>/dev/null | grep -v "$UPDATE_PATH" | crontab -
        rm -f "$UPDATE_PATH"
        
        log "✓ 已清理自动更新定时任务和脚本"
    fi
    
    # 删除当前脚本
    rm -f /etc/rc.d/S99auto-setup /etc/rc.d/K01auto-setup 2>/dev/null
    (sleep 5 && rm -f /etc/init.d/auto-setup) &
    log "✓ 自动配置脚本已删除"
}

# 检查包是否已安装
is_installed() {
    opkg list-installed | grep -q "^$1 "
}

# 检查包是否存在于源
is_exists() {
    opkg list | grep -q "^$1 "
}

# 安装单个包（官方源）
install_pkg_official() {
    local pkg="$1"
    
    pkg=$(echo "$pkg" | xargs)
    [ -z "$pkg" ] && return 3
    
    if is_installed "$pkg"; then
        log "  $pkg 已安装，跳过"
        return 2
    fi
    
    if ! is_exists "$pkg"; then
        log "  ⊗ $pkg 不存在于官方源"
        return 1
    fi
    
    log "  安装 $pkg..."
    if opkg install "$pkg" >>"$LOG_FILE" 2>&1; then
        log "  ✓ $pkg 安装成功"
        
        # 智能安装语言包
        local lang=""
        case "$pkg" in
            luci-app-*)
                lang="luci-i18n-${pkg#luci-app-}-zh-cn"
                ;;
            luci-theme-*)
                lang="luci-i18n-theme-${pkg#luci-theme-}-zh-cn"
                ;;
        esac
        
        if [ -n "$lang" ] && ! is_installed "$lang" && is_exists "$lang"; then
            log "  安装语言包 $lang..."
            if opkg install "$lang" >>"$LOG_FILE" 2>&1; then
                log "  ✓ $lang 安装成功"
            else
                log "  ⚠ $lang 安装失败"
            fi
        fi
        
        return 0
    else
        log "  ✗ $pkg 安装失败"
        return 1
    fi
}

# 官方源批量安装
install_official() {
    local pkg_list="$1"
    
    log "======================================"
    log "从官方源安装"
    log "======================================"
    
    if [ -z "$pkg_list" ]; then
        log "软件包列表为空"
        return 0
    fi
    
    log "需要安装: $pkg_list"
    
    log "更新软件源..."
    if ! opkg update >>"$LOG_FILE" 2>&1; then
        log "✗ 软件源更新失败"
        PENDING_PACKAGES="$pkg_list"
        return 1
    fi
    log "✓ 软件源更新成功"
    
    local ok=0 fail=0 skip=0
    local failed_list=""
    
    for pkg in $pkg_list; do
        pkg=$(echo "$pkg" | xargs)
        [ -z "$pkg" ] && continue
        
        install_pkg_official "$pkg"
        case $? in
            0) ok=$((ok + 1)) ;;
            1) 
                failed_list="$failed_list $pkg"
                fail=$((fail + 1))
                ;;
            2) skip=$((skip + 1)) ;;
        esac
    done
    
    PENDING_PACKAGES="$failed_list"
    
    log "--------------------------------------"
    log "官方源安装完成:"
    log "  ✓ 成功: $ok 个"
    log "  ✗ 失败: $fail 个"
    log "  ⊝ 跳过: $skip 个"
    [ -n "$failed_list" ] && log "失败列表:$failed_list"
    
    return 0
}

# 检查文件是否匹配架构
is_match() {
    local file="$1"
    case "$file" in
        *_${SYS_ARCH}.ipk|*_${SYS_ARCH}_*.ipk|*_all.ipk)
            return 0 ;;
        *)
            return 1 ;;
    esac
}

# 比较主程序包优先级
is_better() {
    local cur="$1"
    local new="$2"
    
    [ -z "$cur" ] && return 0
    
    case "$new" in
        *_wanji.ipk)
            [ "$cur" = *_wanji.ipk ] && [ "$new" \> "$cur" ] && return 0
            [ "$cur" != *_wanji.ipk ] && return 0
            ;;
        *)
            [ "$cur" != *_wanji.ipk ] && [ "$new" \> "$cur" ] && return 0
            ;;
    esac
    return 1
}

# 查找 Gitee 仓库
find_repo() {
    local pkg="$1"
    
    for owner in $GITEE_OWNERS; do
        local repo="${owner}/${pkg}"
        local url=$(printf "$API_TPL" "$repo")
        
        local code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "User-Agent: $USER_AGENT" "$url")
        
        if [ "$code" = "200" ]; then
            echo "$repo"
            return 0
        fi
    done
    
    return 1
}

# 从 Gitee 安装单个包
install_pkg_gitee() {
    local pkg="$1"
    local repo="$2"
    
    # 提取应用名称
    local app=""
    case "$pkg" in
        luci-app-*)   app="${pkg#luci-app-}" ;;
        luci-theme-*) app="${pkg#luci-theme-}" ;;
        *)            app="$pkg" ;;
    esac
    
    log "从 Gitee 安装 $pkg (仓库: $repo)"
    
    # 获取最新版本信息
    local url=$(printf "$API_TPL" "$repo")
    local json=$(curl -s -H "User-Agent: $USER_AGENT" "$url")
    
    if [ -z "$json" ] || echo "$json" | grep -q '"message"'; then
        log "✗ 获取版本信息失败"
        return 1
    fi
    
    local ver=$(echo "$json" | grep -o '"tag_name":"[^"]*"' | cut -d'"' -f4)
    if [ -z "$ver" ]; then
        log "✗ 未找到版本信息"
        return 1
    fi
    log "  版本: $ver"
    
    # 提取所有 ipk 文件
    local files=$(echo "$json" | grep -o '"browser_download_url":"[^"]*\.ipk"' | cut -d'"' -f4 | xargs -n1 basename)
    if [ -z "$files" ]; then
        log "✗ 未找到 ipk 文件"
        return 1
    fi
    
    # 智能分类文件
    local bin="" luci="" i18n=""
    
    for f in $files; do
        case "$f" in
            *luci-i18n-*${app}*zh-cn*.ipk)
                [ -z "$i18n" ] && i18n="$f"
                ;;
            luci-app-${app}_*.ipk|luci-theme-${app}_*.ipk)
                [ -z "$luci" ] && luci="$f"
                ;;
            *${app}*.ipk)
                case "$f" in
                    luci-*|*-luci-*) ;;
                    *)
                        if is_match "$f" && is_better "$bin" "$f"; then
                            bin="$f"
                        fi
                        ;;
                esac
                ;;
        esac
    done
    
    # 构建安装顺序
    local order=""
    [ -n "$bin" ] && order="$bin"
    [ -n "$luci" ] && order="$order $luci"
    [ -n "$i18n" ] && order="$order $i18n"
    
    if [ -z "$order" ]; then
        log "✗ 未找到匹配的包文件"
        return 1
    fi
    
    log "  安装计划: $order"
    
    # 下载并安装
    for f in $order; do
        f=$(echo "$f" | xargs)
        [ -z "$f" ] && continue
        
        local dl=$(echo "$json" | grep -o "\"browser_download_url\":\"[^\"]*${f}\"" | cut -d'"' -f4)
        if [ -z "$dl" ]; then
            log "  ⚠ 未找到 $f 的下载链接"
            continue
        fi
        
        log "  下载: $f"
        if ! curl -fsSL -o "/tmp/$f" -H "User-Agent: $USER_AGENT" "$dl"; then
            log "  ✗ 下载失败"
            rm -f /tmp/*${app}*.ipk 2>/dev/null
            return 1
        fi
        
        log "  安装: $f"
        if ! opkg install "/tmp/$f" >>"$LOG_FILE" 2>&1; then
            log "  ✗ 安装失败"
            rm -f /tmp/*${app}*.ipk 2>/dev/null
            return 1
        fi
        
        log "  ✓ 安装成功"
    done
    
    # 清理临时文件
    rm -f /tmp/*${app}*.ipk 2>/dev/null
    
    log "✓ $pkg 安装完成"
    return 0
}

# Gitee批量安装
install_gitee() {
    local pkg_list="$1"
    
    log "======================================"
    log "从 Gitee 安装"
    log "======================================"
    
    if [ -z "$pkg_list" ]; then
        log "软件包列表为空"
        return 0
    fi
    
    log "需要安装: $pkg_list"
    
    local ok=0 fail=0 skip=0
    local done_list="" failed_list=""
    
    for pkg in $pkg_list; do
        pkg=$(echo "$pkg" | xargs)
        [ -z "$pkg" ] && continue
        
        # 提取主包名（处理语言包情况）
        local main="$pkg"
        case "$pkg" in
            luci-i18n-theme-*-zh-cn)
                local tmp="${pkg#luci-i18n-theme-}"
                main="luci-theme-${tmp%-zh-cn}"
                ;;
            luci-i18n-*-zh-cn)
                local tmp="${pkg#luci-i18n-}"
                tmp="${tmp%-zh-cn}"
                if echo " $pkg_list " | grep -q " luci-theme-${tmp} "; then
                    main="luci-theme-${tmp}"
                else
                    main="luci-app-${tmp}"
                fi
                ;;
        esac
        
        # 避免重复安装
        case " $done_list " in
            *" $main "*) continue ;;
        esac
        done_list="$done_list $main "
        
        # 检查是否已安装
        if is_installed "$main"; then
            log "✓ $main 已安装，跳过"
            skip=$((skip + 1))
            continue
        fi
        
        # 查找仓库
        log "查找 $main 的 Gitee 仓库..."
        local repo=$(find_repo "$main")
        
        if [ $? -ne 0 ] || [ -z "$repo" ]; then
            log "✗ 未找到仓库 (已尝试: $GITEE_OWNERS)"
            failed_list="$failed_list $main"
            fail=$((fail + 1))
            continue
        fi
        
        # 安装
        if install_pkg_gitee "$main" "$repo"; then
            ok=$((ok + 1))
        else
            failed_list="$failed_list $main"
            fail=$((fail + 1))
        fi
    done
    
    PENDING_PACKAGES="$failed_list"
    
    log "--------------------------------------"
    log "Gitee 安装完成:"
    log "  ✓ 成功: $ok 个"
    log "  ✗ 失败: $fail 个"
    log "  ⊝ 跳过: $skip 个"
    [ -n "$failed_list" ] && log "失败列表:$failed_list"
    
    return 0
}

# 主安装流程
run_install() {
    PENDING_PACKAGES="$PACKAGES"
    
    if [ "$INSTALL_PRIORITY" = "1" ]; then
        # 优先官方源
        log "======================================"
        log "安装策略: 优先官方源 -> Gitee备用"
        log "======================================"
        
        install_official "$PENDING_PACKAGES"
        
        if [ -n "$PENDING_PACKAGES" ]; then
            install_gitee "$PENDING_PACKAGES"
        fi
    else
        # 优先Gitee
        log "======================================"
        log "安装策略: 优先Gitee -> 官方源备用"
        log "======================================"
        
        install_gitee "$PENDING_PACKAGES"
        
        if [ -n "$PENDING_PACKAGES" ]; then
            install_official "$PENDING_PACKAGES"
        fi
    fi
    
    # 记录最终失败的包
    FAILED_PACKAGES="$PENDING_PACKAGES"
}

# 主逻辑
run_setup() {
    log "======================================"
    log "开始自动配置 (PID: $$)"
    log "日志文件: $LOG_FILE"
    log "======================================"
    
    # 初始化架构
    init_arch
    
    # 执行安装
    run_install
    
    log "======================================"
    log "安装流程完成"
    log "======================================"
    
    # 输出最终结果
    if [ -z "$FAILED_PACKAGES" ]; then
        log "✓ 所有软件包安装成功"
    else
        log "⚠ 以下软件包安装失败:$FAILED_PACKAGES"
    fi
    
    # 保存日志
    cp "$LOG_FILE" "/tmp/auto-setup-latest.log" 2>/dev/null
    log "日志已保存: /tmp/auto-setup-latest.log"
    
    # 删除脚本并配置自动更新（无论安装成功与否都执行）
    remove_self
}

boot() {
    (run_setup) &
}

start() {
    run_setup
    return 0
}

stop() {
    log "停止自动配置服务"
}
