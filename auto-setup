#!/bin/sh /etc/rc.common

START=99
STOP=01

# ==================== 用户配置区 ====================
# 软件包列表
PACKAGES="luci-app-wechatpush luci-app-passwall luci-app-openlist luci-app-filemanager luci-i18n-package-manager-zh-cn luci-i18n-firewall-zh-cn vsftpd openssh-sftp-server luci-app-ttyd luci-app-lucky luci-app-tailscale luci-theme-aurora"

# Gitee 仓库所有者列表（按优先级顺序尝试）
GITEE_OWNERS="whzhni sirpdboy kiddin9"

# 自动更新脚本配置
AUTO_UPDATE=1  # 1=启用, 0=禁用
UPDATE_PATH="/usr/bin/auto-update.sh"
UPDATE_MIRRORS="https://gitee.com https://raw.gitcode.com"  # 镜像地址（按优先级）
UPDATE_SCRIPT="/whzhni/luci-app-tailscale/raw/main/auto-update.sh"  # 脚本路径
CRON_TIME="0 3 * * *"  # 定时任务时间（默认每天凌晨3点）
# ====================================================

# ==================== 内部变量区 ====================
LOG_FILE="/tmp/auto-setup-$(date +%Y%m%d-%H%M%S).log"
SYS_ARCH=""
USER_AGENT="Mozilla/5.0 (compatible; OpenWrt-AutoSetup/1.0)"
API_TPL="https://gitee.com/api/v5/repos/%s/releases/latest"

# 统计变量
UPDATE_DL=0        # 自动更新脚本下载状态
FAIL_OFFICIAL=0    # 官方源安装失败数
NOT_IN_REPO=0      # 不在官方源的包数
FAIL_GITEE=0       # Gitee 安装失败数
# ====================================================

# 日志函数
log() {
    local msg="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "$msg" | tee -a "$LOG_FILE"
    logger -t "auto-setup" "$1"
}

# 初始化系统架构
init_arch() {
    if [ -z "$SYS_ARCH" ]; then
        local arch=$(uname -m)
        case "$arch" in
            aarch64)   SYS_ARCH="arm64" ;;
            armv7l)    SYS_ARCH="armv7" ;;
            armv6l)    SYS_ARCH="armv6" ;;
            armv5tel)  SYS_ARCH="armv5" ;;
            x86_64)    SYS_ARCH="x86_64" ;;
            i686|i386) SYS_ARCH="i386" ;;
            mips)      SYS_ARCH="mips" ;;
            mipsel)    SYS_ARCH="mipsle" ;;
            riscv64)   SYS_ARCH="riscv64" ;;
            *)         SYS_ARCH="unknown" ;;
        esac
        log "系统架构: $SYS_ARCH"
    fi
}

# 删除自己并设置自动更新
remove_self() {
    log "准备清理自动配置脚本..."
    
    if [ "$AUTO_UPDATE" = "1" ]; then
        log "启用自动更新功能..."
        mkdir -p /usr/bin/
        
        # 循环尝试多个镜像
        for mirror in $UPDATE_MIRRORS; do
            local url="${mirror}${UPDATE_SCRIPT}"
            
            log "尝试下载: $url"
            if curl -fsSL "$url" -o "$UPDATE_PATH" && \
               [ -f "$UPDATE_PATH" ] && [ -s "$UPDATE_PATH" ]; then
                log "✓ 下载成功"
                UPDATE_DL=1
                break
            else
                log "✗ 下载失败"
                rm -f "$UPDATE_PATH"
            fi
        done
        
        # 处理下载结果
        if [ "$UPDATE_DL" = "1" ]; then
            chmod +x "$UPDATE_PATH"
            
            # 添加定时任务
            (crontab -l 2>/dev/null | grep -v "$UPDATE_PATH"; \
             echo "$CRON_TIME $UPDATE_PATH") | crontab -
            
            log "✓ 自动更新脚本已安装并设置定时任务: $CRON_TIME"
            log "✓ 定时任务已添加，可使用 'crontab -l' 查看"
            
            log "立即执行一次自动更新..."
            "$UPDATE_PATH" &
        else
            log "✗ 自动更新脚本下载失败，所有镜像均不可用"
        fi
    else
        log "自动更新功能已禁用"
        
        # 清理定时任务
        crontab -l 2>/dev/null | grep -v "$UPDATE_PATH" | crontab -
        
        log "✓ 已清理自动更新定时任务"
    fi
    
    # 删除当前脚本
    rm -f /etc/rc.d/S99auto-setup /etc/rc.d/K01auto-setup 2>/dev/null
    (sleep 5 && rm -f /etc/init.d/auto-setup) &
    log "✓ 自动配置脚本已删除"
}

is_installed() {
    opkg list-installed | grep -q "^$1 "
}

is_exists() {
    opkg list | grep -q "^$1 "
}

# 安装单个包
install_pkg() {
    local pkg="$1"
    local lang=""
    
    pkg=$(echo "$pkg" | xargs)
    [ -z "$pkg" ] && return 2
    
    if is_installed "$pkg"; then
        log "  $pkg 已安装，跳过"
        return 0
    fi
    
    if ! is_exists "$pkg"; then
        log "  ⊗ $pkg 不存在于官方源"
        return 1
    fi
    
    log "  安装 $pkg..."
    if opkg install "$pkg" >>"$LOG_FILE" 2>&1; then
        log "  ✓ $pkg 安装成功"
    else
        log "  ✗ $pkg 安装失败"
        return 1
    fi
    
    # 智能安装语言包
    case "$pkg" in
        luci-app-*)
            lang="luci-i18n-${pkg#luci-app-}-zh-cn"
            ;;
        luci-theme-*)
            lang="luci-i18n-theme-${pkg#luci-theme-}-zh-cn"
            ;;
        *)
            return 0
            ;;
    esac
    
    if is_installed "$lang"; then
        log "  $lang 已安装，跳过"
    elif is_exists "$lang"; then
        log "  安装语言包 $lang..."
        if opkg install "$lang" >>"$LOG_FILE" 2>&1; then
            log "  ✓ $lang 安装成功"
        else
            log "  ⚠ $lang 安装失败"
        fi
    fi
    
    return 0
}

install_official() {
    log "步骤1: 安装软件包（优先官方源）"
    
    if [ -z "$PACKAGES" ]; then
        log "软件包列表为空"
        return 1
    fi
    
    log "需要安装的插件: $PACKAGES"
    
    log "更新软件源..."
    if ! opkg update >>"$LOG_FILE" 2>&1; then
        log "软件源更新失败"
        return 1
    fi
    log "软件源更新成功"
    
    local fail=0 ok=0 skip=0 notin=0
    FAILED=""
    
    for pkg in $PACKAGES; do
        pkg=$(echo "$pkg" | xargs)
        [ -z "$pkg" ] && continue
        
        install_pkg "$pkg"
        case $? in
            0) ok=$((ok + 1)) ;;
            1) 
                if ! is_exists "$pkg"; then
                    FAILED="$FAILED $pkg"
                    notin=$((notin + 1))
                else
                    fail=$((fail + 1))
                fi
                ;;
            2) skip=$((skip + 1)) ;;
        esac
    done
    
    # 更新全局统计
    FAIL_OFFICIAL=$fail
    NOT_IN_REPO=$notin
    
    log "--------------------------------------"
    log "官方源检查完成:"
    log "  ✓ 安装成功: ${ok} 个"
    log "  ⊗ 不在官方源: ${notin} 个"
    log "  ⊝ 跳过: ${skip} 个"
    log "  ✗ 失败: ${fail} 个"
    [ -n "$FAILED" ] && log "需要从 Gitee 安装: $FAILED"
    return 0
}

# 检查文件是否匹配架构
is_match() {
    local file="$1"
    
    case "$file" in
        *_${SYS_ARCH}.ipk|*_${SYS_ARCH}_*.ipk|*_all.ipk)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# 比较主程序包优先级
is_better() {
    local cur="$1"
    local new="$2"
    
    [ -z "$cur" ] && return 0
    
    case "$new" in
        *_wanji.ipk)
            case "$cur" in
                *_wanji.ipk)
                    [ "$new" \> "$cur" ] && return 0
                    return 1
                    ;;
                *)
                    return 0
                    ;;
            esac
            ;;
        *)
            case "$cur" in
                *_wanji.ipk)
                    return 1
                    ;;
                *)
                    [ "$new" \> "$cur" ] && return 0
                    return 1
                    ;;
            esac
            ;;
    esac
}

# 查找 Gitee 仓库
find_repo() {
    local pkg="$1"
    
    for owner in $GITEE_OWNERS; do
        local repo="${owner}/${pkg}"
        local url=$(printf "$API_TPL" "$repo")
        
        local code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "User-Agent: $USER_AGENT" \
            "$url")
        
        if [ "$code" = "200" ]; then
            echo "$repo"
            return 0
        fi
    done
    
    return 1
}

# 从 Gitee 安装
install_gitee() {
    local pkg="$1"
    local repo="$2"
    
    # 提取应用名称
    local app=""
    case "$pkg" in
        luci-app-*)   app="${pkg#luci-app-}" ;;
        luci-theme-*) app="${pkg#luci-theme-}" ;;
        *)            app="$pkg" ;;
    esac
    
    log "从 Gitee 智能安装 $pkg"
    log "======================================"
    log "仓库地址: $repo"
    
    # 获取最新版本
    local url=$(printf "$API_TPL" "$repo")
    local json=$(curl -s -H "User-Agent: $USER_AGENT" "$url")
    
    # 检查响应
    if [ -z "$json" ]; then
        log "✗ API 请求失败"
        return 1
    fi
    
    if echo "$json" | grep -q '"message"'; then
        local err=$(echo "$json" | grep -o '"message":"[^"]*"' | cut -d'"' -f4)
        log "✗ API 错误: $err"
        return 1
    fi
    
    local ver=$(echo "$json" | grep -o '"tag_name":"[^"]*"' | cut -d'"' -f4)
    
    if [ -z "$ver" ]; then
        log "✗ 未能获取最新版本"
        return 1
    fi
    log "最新版本: $ver"
    
    # 提取所有 ipk 文件
    local files=$(echo "$json" | grep -o '"browser_download_url":"[^"]*\.ipk"' | cut -d'"' -f4 | xargs -n1 basename)
    
    if [ -z "$files" ]; then
        log "✗ 未找到任何 ipk 文件"
        return 1
    fi
    
    log "分析可用文件..."
    
    # 智能分类
    local bin="" luci="" i18n=""
    
    for f in $files; do
        [ -z "$f" ] && continue
        
        # 1. 语言包
        case "$f" in
            *luci-i18n-*${app}*zh-cn*.ipk)
                [ -z "$i18n" ] && i18n="$f"
                continue
                ;;
        esac
        
        # 2. LuCI 包
        case "$f" in
            luci-app-${app}_*.ipk|luci-theme-${app}_*.ipk)
                [ -z "$luci" ] && luci="$f"
                continue
                ;;
        esac
        
        # 3. 主程序包
        case "$f" in
            luci-*|*-luci-*)
                ;;
            *${app}*.ipk)
                if is_match "$f"; then
                    if is_better "$bin" "$f"; then
                        bin="$f"
                    fi
                fi
                ;;
        esac
    done
    
    # 输出识别结果
    [ -n "$bin" ] && log "  [主程序] $bin"
    [ -n "$luci" ] && log "  [LuCI包] $luci"
    [ -n "$i18n" ] && log "  [语言包] $i18n"
    
    # 构建安装顺序
    local order=""
    [ -n "$bin" ] && order="$bin"
    [ -n "$luci" ] && order="$order $luci"
    [ -n "$i18n" ] && order="$order $i18n"
    
    if [ -z "$order" ]; then
        log "✗ 未找到任何匹配的包"
        return 1
    fi
    
    log "安装计划: $order"
    
    # 下载并安装
    local count=0
    for f in $order; do
        f=$(echo "$f" | xargs)
        [ -z "$f" ] && continue
        
        # 提取下载链接
        local dl=$(echo "$json" | grep -o "\"browser_download_url\":\"[^\"]*${f}\"" | cut -d'"' -f4)
        
        if [ -z "$dl" ]; then
            log "⚠ 未找到 $f 的下载链接"
            continue
        fi
        
        # 下载
        log "下载: $f"
        if ! curl -fsSL -o "/tmp/$f" -H "User-Agent: $USER_AGENT" "$dl"; then
            log "✗ 下载失败"
            rm -f /tmp/*${app}*.ipk 2>/dev/null
            return 1
        fi
        
        # 安装
        log "  安装 $f..."
        if ! opkg install "/tmp/$f" >>"$LOG_FILE" 2>&1; then
            log "  ✗ 安装失败"
            rm -f /tmp/*${app}*.ipk 2>/dev/null
            return 1
        fi
        
        log "  ✓ 安装成功"
        count=$((count + 1))
    done
    
    # 清理
    rm -f /tmp/*${app}*.ipk 2>/dev/null
    
    log "✓ $pkg 安装完成（共 $count 个包）"
    return 0
}

# Gitee 备用安装
install_fallback() {
    if [ -z "$FAILED" ]; then
        log "没有需要备用安装的包"
        return 0
    fi
    
    log "======================================"
    log "步骤2: Gitee 备用安装"
    log "======================================"
    
    local ok=0 fail=0 skip=0 done=""
    
    for pkg in $FAILED; do
        # 提取主包名
        local main=""
        case "$pkg" in
            luci-i18n-*-zh-cn)
                local tmp="${pkg#luci-i18n-}"
                tmp="${tmp%-zh-cn}"
                if echo " $FAILED " | grep -q " luci-theme-${tmp} "; then
                    main="luci-theme-${tmp}"
                else
                    main="luci-app-${tmp}"
                fi
                ;;
            luci-i18n-theme-*-zh-cn)
                local tmp="${pkg#luci-i18n-theme-}"
                main="luci-theme-${tmp%-zh-cn}"
                ;;
            *)
                main="$pkg"
                ;;
        esac
        
        # 避免重复
        case " $done " in
            *" $main "*) continue ;;
        esac
        done="$done $main "
        
        # 检查是否已安装
        if is_installed "$main"; then
            log "✓ $main 已安装，跳过"
            skip=$((skip + 1))
            continue
        fi
        
        # 查找仓库
        log "尝试从 Gitee 安装 $main..."
        log "  查找 Gitee 仓库..."
        
        local repo=$(find_repo "$main")
        
        if [ $? -ne 0 ] || [ -z "$repo" ]; then
            log "  ✗ 未找到 Gitee 仓库 (已尝试: $GITEE_OWNERS)"
            fail=$((fail + 1))
            continue
        fi
        
        log "  ✓ 找到仓库: $repo"
        
        # 从 Gitee 安装
        if install_gitee "$main" "$repo"; then
            ok=$((ok + 1))
        else
            fail=$((fail + 1))
        fi
    done
    
    # 更新全局统计
    FAIL_GITEE=$fail
    
    log "--------------------------------------"
    log "Gitee 检查完成:"
    log "  ✓ 安装成功: ${ok} 个"
    log "  ⊗ 未找到仓库: ${fail} 个"
    log "  ⊝ 跳过: ${skip} 个"
    
    # 判断是否删除脚本
    # 条件1: 所有包在官方源且成功
    if [ "$FAIL_OFFICIAL" -eq 0 ] && [ "$NOT_IN_REPO" -eq 0 ]; then
        log "✓ 所有包均在官方源且安装成功，准备删除自动配置脚本"
        remove_self
        return 0
    fi
    
    # 条件2: Gitee 安装全部成功
    if [ "$FAIL_GITEE" -eq 0 ] && [ "$NOT_IN_REPO" -gt 0 ]; then
        log "✓ Gitee 备用安装全部成功，准备删除自动配置脚本"
        remove_self
        return 0
    fi
    
    # 条件3: 自动更新已启用但脚本下载失败
    if [ "$AUTO_UPDATE" = "1" ] && [ "$UPDATE_DL" != "1" ]; then
        log "⚠ 自动更新已启用但脚本下载失败，保留自动配置脚本待重启后重试"
        return 1
    fi
    
    # 其他情况：仍有失败
    log "⚠ 仍有失败项 (官方源失败: $FAIL_OFFICIAL, Gitee失败: $FAIL_GITEE)，保留自动配置脚本待重启后重试"
    return 1
}

# 主逻辑
run_setup() {
    log "======================================"
    log "开始自动配置 (PID: $$)"
    log "日志文件: $LOG_FILE"
    log "======================================"
    
    # 初始化架构
    init_arch
    
    # 安装软件包
    install_official
    
    # Gitee 备用安装
    install_fallback
    
    log "======================================"
    log "✓ 配置流程完成"
    log "======================================"
    
    cp "$LOG_FILE" "/tmp/auto-setup-success.log" 2>/dev/null
    log "日志已保存到: /tmp/auto-setup-success.log"
}

boot() {
    (run_setup) &
}

start() {
    run_setup
    return 0
}

stop() {
    log "停止自动配置服务"
}
