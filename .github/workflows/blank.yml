name: "自动构建 Tailscale（持久化配置版，自动识别前后端文件）"

on:
  schedule:
    - cron: "0 2 * * *"  # 每天北京时间10点自动检查
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      need_build: ${{ steps.check.outputs.need_build }}
      latest_version: ${{ steps.check.outputs.latest_version }}

    steps:
      - name: "1️⃣ 检出代码"
        uses: actions/checkout@v4

      - name: "2️⃣ 检查上游更新"
        id: check
        run: |
          echo "开始检查上游版本更新..."
          upstream=$(curl -s "https://api.github.com/repos/asvow/luci-app-tailscale/releases/latest" \
            | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "获取失败")
          current=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" 2>/dev/null \
            | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "v0.0.0")

          echo "=== 版本对比结果 ==="
          echo "上游版本: $upstream"
          echo "我们的版本: $current"

          if [ "$upstream" != "$current" ] && [ "$upstream" != "获取失败" ]; then
            echo "need_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=$upstream" >> $GITHUB_OUTPUT
            echo "结论: 需要构建"
          else
            echo "need_build=false" >> $GITHUB_OUTPUT
            echo "latest_version=$current" >> $GITHUB_OUTPUT
            echo "结论: 不需要构建"
          fi

      - name: "🔍 输出检查结果"
        run: |
          echo "need_build = ${{ steps.check.outputs.need_build }}"
          echo "latest_version = ${{ steps.check.outputs.latest_version }}"

      - name: "3️⃣ 克隆并扫描源码"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        id: scan
        run: |
          set -e
          echo "正在克隆上游源码..."
          git clone https://github.com/asvow/luci-app-tailscale
          cd luci-app-tailscale

          echo "全局扫描包含 /etc/tailscale 的文件..."
          matches=$(grep -RIl "/etc/tailscale" . || true)

          if [ -z "$matches" ]; then
            echo "未发现任何包含 /etc/tailscale 的文件，可能上游已改用其他路径"
            exit 1
          fi

          echo "发现以下文件:"
          echo "$matches"

          # 分类
          frontend=$(echo "$matches" | grep "htdocs" || true)
          backend=$(echo "$matches" | grep -E "files|luasrc" || true)
          others=$(echo "$matches" | grep -vE "htdocs|files|luasrc" || true)

          echo "前端文件:"
          echo "${frontend:-<无>}"
          echo "后端文件:"
          echo "${backend:-<无>}"
          echo "其他文件:"
          echo "${others:-<无>}"

          # 输出到 GITHUB_OUTPUT
          echo "frontend<<EOF" >> $GITHUB_OUTPUT
          echo "$frontend" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "backend<<EOF" >> $GITHUB_OUTPUT
          echo "$backend" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "others<<EOF" >> $GITHUB_OUTPUT
          echo "$others" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          cd ..

      - name: "4️⃣ 替换路径并校验"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          cd luci-app-tailscale

          SOURCE="/etc/tailscale"
          TARGET="/etc/config/tailscale-data"

          echo "开始替换 ${SOURCE} -> ${TARGET}"

          all_files="${{ steps.scan.outputs.frontend }} ${{ steps.scan.outputs.backend }} ${{ steps.scan.outputs.others }}"
          for f in $all_files; do
            if [ -f "$f" ]; then
              echo "替换文件: $f"
              sed -i "s|${SOURCE}|${TARGET}|g" "$f"
            fi
          done

          echo "替换完成，校验结果:"
          grep -RIl "${TARGET}" . || echo "警告：未发现新路径"

          cd ..


      - name: "4️⃣ 执行路径替换并校验"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          cd luci-app-tailscale

          TARGET="/etc/config/tailscale-data"
          SOURCE="/etc/tailscale"

          echo "开始替换路径: ${SOURCE} -> ${TARGET}"

          # 对前端文件执行替换
          if [ -n "${{ steps.scan.outputs.frontend_files }}" ]; then
            echo "替换前端文件:"
            printf "%s\n" "${{ steps.scan.outputs.frontend_files }}"
            printf "%s\n" "${{ steps.scan.outputs.frontend_files }}" | while read -r f; do
              [ -n "$f" ] && sed -i "s|${SOURCE}|${TARGET}|g" "$f"
            done
          else
            echo "警告：未自动识别到前端文件，尝试常见默认路径回退..."
            if [ -f "htdocs/luci-static/resources/view/tailscale/setting.js" ]; then
              sed -i "s|${SOURCE}|${TARGET}|g" htdocs/luci-static/resources/view/tailscale/setting.js
              echo "已回退替换: htdocs/luci-static/resources/view/tailscale/setting.js"
            fi
          fi

          # 对后端文件执行替换
          if [ -n "${{ steps.scan.outputs.backend_files }}" ]; then
            echo "替换后端文件:"
            printf "%s\n" "${{ steps.scan.outputs.backend_files }}"
            printf "%s\n" "${{ steps.scan.outputs.backend_files }}" | while read -r f; do
              [ -n "$f" ] && sed -i "s|${SOURCE}|${TARGET}|g" "$f"
            done
          else
            echo "警告：未自动识别到后端文件，尝试常见默认路径回退..."
            if [ -f "files/luasrc/model/cbi/tailscale.lua" ]; then
              sed -i "s|${SOURCE}|${TARGET}|g" files/luasrc/model/cbi/tailscale.lua
              echo "已回退替换: files/luasrc/model/cbi/tailscale.lua"
            fi
          fi

          echo "替换完成，开始进行校验..."
          # 校验至少有一处替换生效
          count_new=$(grep -RIl "${TARGET}" htdocs files luasrc 2>/dev/null | wc -l || true)
          count_old=$(grep -RIl "${SOURCE}" htdocs files luasrc 2>/dev/null | wc -l || true)
          echo "包含新路径的文件数: ${count_new}"
          echo "仍包含旧路径的文件数: ${count_old}"

          if [ "${count_new}" -eq 0 ]; then
            echo "错误：未发现任何文件包含新路径 ${TARGET}，替换可能失败"
            exit 1
          fi

          echo "校验通过：发现 ${count_new} 个文件已使用持久化路径。"
          if [ "${count_old}" -gt 0 ]; then
            echo "提示：仍有 ${count_old} 个文件包含旧路径 ${SOURCE}，请注意是否需要进一步替换。"
          fi

          cd ..

      - name: "5️⃣ 构建 IPK 包"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          echo "开始构建 IPK 包..."
          mkdir -p ipk-build/control ipk-build/data

          # 拷贝文件内容
          cp -r luci-app-tailscale/files/* ipk-build/data/ 2>/dev/null || true
          cp -r luci-app-tailscale/htdocs ipk-build/data/ 2>/dev/null || true
          cp -r luci-app-tailscale/luasrc ipk-build/data/ 2>/dev/null || true

          # 生成 control 文件（避免 heredoc，用 echo 拼接）
          {
            echo "Package: luci-app-tailscale"
            echo "Version: ${{ steps.check.outputs.latest_version }}-persistent1"
            echo "Depends: libc, tailscale"
            echo "Source: luci-app-tailscale"
            echo "Section: luci"
            echo "Architecture: all"
            echo "Installed-Size: 1024"
            echo "Description: Tailscale LuCI app with persistent config"
            echo " 持久化配置版本，解决固件升级配置丢失问题"
            echo " 配置路径: /etc/config/tailscale-data"
          } > ipk-build/control/control

          # 打包 IPK
          cd ipk-build
          tar -czf control.tar.gz -C control .
          tar -czf data.tar.gz -C data .
          echo "2.0" > debian-binary
          ar r ../luci-app-tailscale-persistent.ipk debian-binary control.tar.gz data.tar.gz
          cd ..
          echo "IPK 包构建完成 ✅"

      - name: "6️⃣ 构建后验证（打印差异与关键文件摘要）"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          echo "打印包含持久化路径的文件列表与摘要："
          grep -RIl "/etc/config/tailscale-data" luci-app-tailscale | xargs -r -n1 sh -c 'echo "---- $1 ----"; sed -n "1,120p" "$1" | sed -n "1,15p"' sh

          echo "展示 control 文件："
          sed -n '1,80p' ipk-build/control/control

      - name: "7️⃣ 发布到 Releases"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.check.outputs.latest_version }}-persistent"
          name: "luci-app-tailscale ${{ steps.check.outputs.latest_version }} (持久化配置版)"
          files: "luci-app-tailscale-persistent.ipk"
          body: |
            luci-app-tailscale 持久化配置版本，自动识别并替换前端/后端路径，解决固件升级配置丢失问题
            配置路径: /etc/config/tailscale-data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
