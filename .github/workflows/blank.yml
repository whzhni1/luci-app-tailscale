name: "构建 Tailscale（ImmortalWrt 主线 APK + ImmortalWrt 24.10 IPK）"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "1️⃣ 检出代码"
        uses: actions/checkout@v4

      - name: "2️⃣ 检查上游版本更新"
        id: version
        run: |
          set -e
          
          echo "::group::📥 获取上游最新版本"
          upstream_latest=$(curl -s "https://api.github.com/repos/asvow/luci-app-tailscale/tags" | jq -r '.[0].name // "none"')
          
          if [ "$upstream_latest" = "none" ] || [ "$upstream_latest" = "null" ]; then
            echo "::error::❌ 无法获取上游版本"
            exit 1
          fi
          
          echo "  上游最新: $upstream_latest"
          echo "::endgroup::"
          
          echo "::group::📦 获取当前仓库版本"
          my_latest=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" | jq -r '.[0].name // "none"')
          
          if [ "$my_latest" != "none" ] && [ "$my_latest" != "null" ]; then
            echo "  当前版本: $my_latest"
          else
            my_latest="none"
            echo "  ⚠️  无版本（首次构建）"
          fi
          echo "::endgroup::"
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 版本对比"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  上游版本: $upstream_latest"
          echo "  当前版本: $my_latest"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          if [ "$upstream_latest" = "$my_latest" ]; then
            echo "::notice::✅ 版本一致 ($upstream_latest)，跳过构建"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::🆕 发现新版本 $upstream_latest（当前 $my_latest），开始构建"
            echo "skip=false" >> $GITHUB_OUTPUT
            version_number=$(echo "$upstream_latest" | sed 's/^v//')
            echo "version=$version_number" >> $GITHUB_OUTPUT
            echo "tag=$upstream_latest" >> $GITHUB_OUTPUT
          fi

      - name: "✅ 版本无更新，结束工作流"
        if: steps.version.outputs.skip == 'true'
        run: |
          echo "::notice::✅ 当前已是最新版本，无需重复构建"
          exit 0
          
      - name: "3️⃣ 拉取 luci-app-tailscale 源码并做持久化替换"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          SRC_DIR=$PWD/src/luci-app-tailscale
          mkdir -p src
          git clone https://github.com/asvow/luci-app-tailscale "$SRC_DIR"
          cd "$SRC_DIR"
          sed -i "s|/etc/tailscale|/etc/config/tailscale-data|g" $(grep -rl "/etc/tailscale" .)
          echo "SRC_DIR=$SRC_DIR" >> $GITHUB_ENV
      # =========================
      # ImmortalWrt 主线 SDK (apk)
      # =========================
      - name: "4️⃣ 下载 ImmortalWrt 主线 SDK (apk)"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          SDK_URL="https://downloads.immortalwrt.org/snapshots/targets/x86/generic/immortalwrt-sdk-x86-generic_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
          curl -LO "$SDK_URL"
          tar --use-compress-program=unzstd -xf "$(basename "$SDK_URL")"
          SDK_DIR=$(find . -maxdepth 1 -type d -name "immortalwrt-sdk-*" -print -quit)
          mv "$SDK_DIR" immortalwrt-sdk-apk
          echo "SDK_DIR_APK=$PWD/immortalwrt-sdk-apk" >> $GITHUB_ENV
          
      - name: "5️⃣ 配置并编译（ImmortalWrt 主线 SDK → apk）"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          cd "$SDK_DIR_APK"
          echo "src-git packages https://github.com/immortalwrt/packages.git" > feeds.conf
          echo "src-git luci https://github.com/immortalwrt/luci.git" >> feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp -r "$SRC_DIR" package/luci-app-tailscale
          
          cat > .config <<EOF
          CONFIG_TARGET_PACKAGING_APK=y
          CONFIG_PACKAGE_luci-app-tailscale=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-tw=m
          # CONFIG_ALL_KMODS is not set
          EOF
          
          make defconfig
          make package/luci-app-tailscale/{clean,compile} V=s -j2 IGNORE_ERRORS=m
          make package/feeds/luci/luci-i18n-tailscale-zh-cn/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          make package/feeds/luci/luci-i18n-tailscale-zh-tw/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          
          mkdir -p ../out-apk
          find bin/packages -type f -name "luci-app-tailscale*.apk" -exec cp -v {} ../out-apk/ \;
          find bin/packages -type f -name "luci-i18n-tailscale*.apk" -exec cp -v {} ../out-apk/ \;
          
      - name: "6️⃣ 打印 APK SDK 产物"
        if: steps.version.outputs.skip != 'true'
        run: |
          echo "=== APK SDK 编译产物 ==="
          ls -lh out-apk || true
          
      # =========================
      # ImmortalWrt 24.10 SDK (ipk)
      # =========================
      - name: "7️⃣ 下载 ImmortalWrt 24.10 SDK (ipk)"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          SDK_URL="https://downloads.immortalwrt.org/releases/24.10.0/targets/x86/64/immortalwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          curl -LO "$SDK_URL"
          tar --use-compress-program=unzstd -xf "$(basename "$SDK_URL")"
          SDK_DIR_RAW=$(find . -maxdepth 1 -type d -name "immortalwrt-sdk-*" -print -quit)
          mv "$SDK_DIR_RAW" immortalwrt-sdk-ipk
          echo "SDK_DIR_IPK=$PWD/immortalwrt-sdk-ipk" >> $GITHUB_ENV
          
      - name: "8️⃣ 配置并编译（ImmortalWrt 24.10 SDK → ipk）"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          cd "$SDK_DIR_IPK"
          echo "src-git packages https://github.com/immortalwrt/packages.git" > feeds.conf
          echo "src-git luci https://github.com/immortalwrt/luci.git" >> feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp -r "$SRC_DIR" package/luci-app-tailscale
          
          cat > .config <<EOF
          CONFIG_PACKAGE_luci-app-tailscale=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-tw=m
          # CONFIG_ALL_KMODS is not set
          EOF
          
          make defconfig
          make package/luci-app-tailscale/{clean,compile} V=s -j2 IGNORE_ERRORS=m
          make package/feeds/luci/luci-i18n-tailscale-zh-cn/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          make package/feeds/luci/luci-i18n-tailscale-zh-tw/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          
          mkdir -p ../out-ipk
          find bin/packages -type f -name "luci-app-tailscale*.ipk" -exec cp -v {} ../out-ipk/ \;
          find bin/packages -type f -name "luci-i18n-tailscale*.ipk" -exec cp -v {} ../out-ipk/ \;
          
      - name: "9️⃣ 打印 IPK SDK 产物"
        if: steps.version.outputs.skip != 'true'
        run: |
          echo "=== IPK SDK 编译产物 ==="
          ls -lh out-ipk || true
          
      # =========================
      # 汇总 & 发布（加过滤）
      # =========================
      - name: "🔟 汇总产物并过滤"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          mkdir -p out
          
          for file in out-apk/*; do
            filename=$(basename "$file")
            if [[ "$filename" == luci-app-tailscale* ]] || [[ "$filename" == luci-i18n-tailscale* ]]; then
              cp -v "$file" out/
            fi
          done
          
          for file in out-ipk/*; do
            filename=$(basename "$file")
            if [[ "$filename" == luci-app-tailscale* ]] || [[ "$filename" == luci-i18n-tailscale* ]]; then
              cp -v "$file" out/
            fi
          done
          
          echo ""
          echo "=== 最终产物（已过滤 lib*, kmod-*, tailscale 主程序）==="
          ls -lh out/

      # ✅ 新增：生成构建时间
      - name: "📅 生成构建时间"
        if: steps.version.outputs.skip != 'true'
        id: build_time
        run: |
          BUILD_TIME=$(TZ=Asia/Shanghai date +"%Y-%m-%d %H:%M:%S CST")
          echo "time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "构建时间: $BUILD_TIME"

      - name: "1️⃣1️⃣ 发布到 GitHub Release"
        if: steps.version.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.version.outputs.tag }}"
          name: "luci-app-tailscale ${{ steps.version.outputs.version }}（ImmortalWrt 主线 APK + 24.10 IPK）"
          files: "out/*"
          body: |
            ## 📦 包含文件
            - **APK 格式**：ImmortalWrt 主线（新版 apk 包管理器）
            - **IPK 格式**：ImmortalWrt 24.10（传统 opkg 包管理器）

            ## 🔧 持久化配置
            - 数据路径：`/etc/config/tailscale-data`

            ## 📥 安装方法
            ```bash
            # APK 方式（ImmortalWrt 主线）
            apk add --allow-untrusted luci-app-tailscale*.apk

            # IPK 方式（ImmortalWrt 24.10 及以下）
            opkg install luci-app-tailscale*.ipk
            ```

            ## 📌 版本信息
            - 上游版本: ${{ steps.version.outputs.tag }}
            - 构建时间: ${{ steps.build_time.outputs.time }}

            ## ⚠️ 注意事项
            - 仅包含 LuCI 界面插件
            - 不含依赖库和 Tailscale 主程序
            - 依赖请从系统源安装

      - name: "1️⃣2️⃣ 同步到 Gitee Release"
        if: steps.version.outputs.skip != 'true'
        continue-on-error: true
        run: |
          chmod +x .github/scripts/release-gitee.sh
          .github/scripts/release-gitee.sh \
            "whzhni/tailscale_lucky" \
            "${{ secrets.GITEE_TOKEN }}" \
            "${{ steps.version.outputs.tag }}" \
            "${{ steps.version.outputs.version }}" \
            "${{ steps.build_time.outputs.time }}" \
            "${{ github.repository }}"
            "luci-app-lucky"
