name: "构建 Tailscale（ImmortalWrt 主线 APK + ImmortalWrt 24.10 IPK）"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 23 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "1️⃣ 检出代码"
        uses: actions/checkout@v4

      - name: "2️⃣ 检查上游版本更新"
        id: version
        run: |
          set -e
          
          echo "::group::📥 获取上游最新版本"
          upstream_latest=$(curl -s "https://api.github.com/repos/asvow/luci-app-tailscale/tags" | jq -r '.[0].name // "none"')
          
          if [ "$upstream_latest" = "none" ] || [ "$upstream_latest" = "null" ]; then
            echo "::error::❌ 无法获取上游版本"
            exit 1
          fi
          
          echo "  上游最新: $upstream_latest"
          echo "::endgroup::"
          
          echo "::group::📦 获取当前仓库版本"
          my_latest=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" | jq -r '.[0].name // "none"')
          
          if [ "$my_latest" != "none" ] && [ "$my_latest" != "null" ]; then
            echo "  当前版本: $my_latest"
          else
            my_latest="none"
            echo "  ⚠️  无版本（首次构建）"
          fi
          echo "::endgroup::"
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 版本对比"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  上游版本: $upstream_latest"
          echo "  当前版本: $my_latest"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          if [ "$upstream_latest" = "$my_latest" ]; then
            echo "::notice::✅ 版本一致 ($upstream_latest)，跳过构建"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::🆕 发现新版本 $upstream_latest（当前 $my_latest），开始构建"
            echo "skip=false" >> $GITHUB_OUTPUT
            version_number=$(echo "$upstream_latest" | sed 's/^v//')
            echo "version=$version_number" >> $GITHUB_OUTPUT
            echo "tag=$upstream_latest" >> $GITHUB_OUTPUT
          fi

      - name: "✅ 版本无更新，结束工作流"
        if: steps.version.outputs.skip == 'true'
        run: |
          echo "::notice::✅ 当前已是最新版本，无需重复构建"
          exit 0
          
      - name: "3️⃣ 拉取 luci-app-tailscale 源码并做持久化修改"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          SRC_DIR=$PWD/src/luci-app-tailscale
          mkdir -p src
          
          echo "📥 克隆 luci-app-tailscale 源码..."
          git clone https://github.com/asvow/luci-app-tailscale "$SRC_DIR"
          cd "$SRC_DIR"
          
          echo ""
          echo "🔧 开始进行持久化修改..."
          echo "========================================"
          
          # ===== 1. 修改 Makefile =====
          echo ""
          echo "1️⃣ 修改 Makefile - 添加配置文件保护"
          if ! grep -q "define Package/luci-app-tailscale/conffiles" Makefile; then
            # 在 PKG_VERSION 后面添加 conffiles 定义
            sed -i '/^PKG_VERSION:=/a\\n# 保护配置文件和数据目录不被覆盖\ndefine Package/luci-app-tailscale/conffiles\n/etc/config/tailscale\n/etc/config/tailscale_data/\nendef' Makefile
            echo "✅ 已添加 conffiles 定义"
          else
            echo "⚠️  conffiles 定义已存在，跳过"
          fi
          
          echo "📄 Makefile 修改后内容："
          cat Makefile
          echo "----------------------------------------"
          
          # ===== 2. 修改默认配置文件 =====
          echo ""
          echo "2️⃣ 修改 root/etc/config/tailscale - 更改默认数据目录"
          sed -i "s|option config_path '/etc/tailscale'|option config_path '/etc/config/tailscale_data'|g" root/etc/config/tailscale
          echo "✅ 已将 config_path 默认值改为 /etc/config/tailscale_data"
          
          echo "📄 修改后的配置文件关键行："
          grep "config_path" root/etc/config/tailscale
          echo "----------------------------------------"
          
          # ===== 3. 修改 init.d 脚本 =====
          echo ""
          echo "3️⃣ 修改 root/etc/init.d/tailscale - 分离临时目录和数据目录"
          
          # 修改 CONFIG_PATH
          sed -i 's|^CONFIG_PATH=/var/lib/tailscale|CONFIG_PATH=/var/run/tailscale|g' root/etc/init.d/tailscale
          echo "✅ 已将 CONFIG_PATH 改为 /var/run/tailscale（临时运行目录）"
          
          # 修改 stop_instance 中的清理逻辑（添加注释说明不删除数据目录）
          sed -i '/rm -rf "$CONFIG_PATH"/i\	# 只删除临时运行目录，不删除包含授权信息的数据目录 (/etc/config/tailscale_data)' root/etc/init.d/tailscale
          echo "✅ 已添加数据目录保护注释"
          
          echo "📄 修改后的 init.d 脚本关键行："
          grep -A 2 "^CONFIG_PATH=" root/etc/init.d/tailscale
          grep -B 1 -A 1 'rm -rf "$CONFIG_PATH"' root/etc/init.d/tailscale
          echo "----------------------------------------"
          
          # ===== 4. 修改 LuCI 界面 JS =====
          echo ""
          echo "4️⃣ 修改 htdocs/luci-static/resources/view/tailscale/setting.js - 更新界面默认值"
          sed -i "s|o.default = '/etc/tailscale';|o.default = '/etc/config/tailscale_data';|g" htdocs/luci-static/resources/view/tailscale/setting.js
          echo "✅ 已将界面默认工作目录改为 /etc/config/tailscale_data"
          
          echo "📄 修改后的 JS 关键行："
          grep -A 2 "config_path.*Workdir" htdocs/luci-static/resources/view/tailscale/setting.js | head -3
          echo "----------------------------------------"
          
          # ===== 5. 重写 uci-defaults 脚本 =====
          echo ""
          echo "5️⃣ 重写 root/etc/uci-defaults/40_luci-tailscale - 实现配置保护逻辑"

          mkdir -p root/etc/uci-defaults
          cat > root/etc/uci-defaults/40_luci-tailscale << 'EOF'
          #!/bin/sh

          # 检查 tailscale 配置是否已存在
          if ! uci -q get tailscale.settings > /dev/null 2>&1; then
              echo "📝 首次安装，导入默认配置..."

              # 如果系统里还没有 /etc/config/tailscale，就从固件内置文件复制一份
              if [ ! -f /etc/config/tailscale ]; then
                  cp /rom/etc/config/tailscale /etc/config/tailscale 2>/dev/null || true
                  uci -q commit tailscale
                  echo "✅ 已导入默认配置文件 /etc/config/tailscale"
              else
                  echo "⚠️ 系统已有 /etc/config/tailscale，保留现有配置"
              fi
          else
              echo "⚠️ 检测到已有 tailscale 配置，保留现有设置"
          fi

          # 确保数据目录存在（放在 /etc/config/ 下，固件升级时会自动保留）
          if [ ! -d /etc/config/tailscale_data ]; then
              mkdir -p /etc/config/tailscale_data
              echo "📁 已创建数据目录 /etc/config/tailscale_data"
          else
              echo "📁 数据目录 /etc/config/tailscale_data 已存在"
          fi

          # 清理 ucitrack 配置
          uci -q batch <<-EOT >/dev/null
              delete ucitrack.@tailscale[-1]
              commit ucitrack
          EOT

          # 清理 LuCI 缓存
          rm -f /tmp/luci-indexcache
          echo "🗑️  已清理 LuCI 缓存"

          exit 0
          EOF

          chmod +x root/etc/uci-defaults/40_luci-tailscale
          echo "✅ uci-defaults 脚本已重写并设置为可执行"

          echo "========================================"
          
          # ===== 6. 删除原始配置文件（避免打包到 ipk 中）=====
          echo ""
          echo "6️⃣ 删除原始配置文件（避免覆盖用户配置）"
          if [ -f root/etc/config/tailscale ]; then
            echo "📄 原始配置文件内容（备份到日志）："
            cat root/etc/config/tailscale
            rm -f root/etc/config/tailscale
            echo "✅ 已删除 root/etc/config/tailscale"
          else
            echo "⚠️  原始配置文件不存在，跳过"
          fi
          echo "----------------------------------------"
          
          # ===== 7. 验证修改 =====
          echo ""
          echo "🔍 验证所有修改..."
          echo "========================================"
          
          echo "✅ 检查点 1: Makefile 包含 conffiles"
          grep -A 3 "define Package/luci-app-tailscale/conffiles" Makefile || echo "❌ 未找到 conffiles 定义"
          
          echo ""
          echo "✅ 检查点 2: uci-defaults 脚本存在且可执行"
          ls -lh root/etc/uci-defaults/40_luci-tailscale
          
          echo ""
          echo "✅ 检查点 3: init.d 脚本使用正确的 CONFIG_PATH"
          grep "^CONFIG_PATH=" root/etc/init.d/tailscale
          
          echo ""
          echo "✅ 检查点 4: 搜索所有包含路径的文件"
          echo "包含 /etc/config/tailscale_data 的文件："
          grep -r "config/tailscale_data" --include="*.js" --include="*.sh" --include="tailscale" . || echo "无"
          
          echo ""
          echo "✅ 检查点 5: 确认原始配置文件已删除"
          if [ ! -f root/etc/config/tailscale ]; then
            echo "✅ 配置文件已删除，不会被打包"
          else
            echo "❌ 配置文件仍然存在！"
          fi
          
          echo "========================================"
          echo ""
          echo "🎉 所有修改完成！"
          echo ""
          echo "📋 修改摘要："
          echo "  1. ✅ Makefile: 添加 conffiles 保护配置"
          echo "  2. ✅ 默认配置: config_path = /etc/config/tailscale_data"
          echo "  3. ✅ Init脚本: CONFIG_PATH = /var/run/tailscale"
          echo "  4. ✅ LuCI界面: 默认工作目录 = /etc/config/tailscale_data"
          echo "  5. ✅ UCI-defaults: 智能配置初始化逻辑"
          echo "  6. ✅ 删除原始配置文件避免覆盖"
          echo ""
          echo "🎯 实现效果："
          echo "  • 重新安装时保留用户配置"
          echo "  • 授权信息存储在 /etc/config/tailscale_data/"
          echo "  • 软件包升级时配置和数据均不丢失"
          echo "  • 固件升级时配置和数据均不丢失（位于 /etc/config/ 下）"
          echo "========================================"
          
          echo "SRC_DIR=$SRC_DIR" >> $GITHUB_ENV
      # =========================
      # ImmortalWrt 主线 SDK (apk)
      # =========================
      - name: "4️⃣ 下载 ImmortalWrt 主线 SDK (apk)"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          SDK_URL="https://downloads.immortalwrt.org/snapshots/targets/x86/generic/immortalwrt-sdk-x86-generic_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
          curl -LO "$SDK_URL"
          tar --use-compress-program=unzstd -xf "$(basename "$SDK_URL")"
          SDK_DIR=$(find . -maxdepth 1 -type d -name "immortalwrt-sdk-*" -print -quit)
          mv "$SDK_DIR" immortalwrt-sdk-apk
          echo "SDK_DIR_APK=$PWD/immortalwrt-sdk-apk" >> $GITHUB_ENV
          
      - name: "5️⃣ 配置并编译（ImmortalWrt 主线 SDK → apk）"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          cd "$SDK_DIR_APK"
          echo "src-git packages https://github.com/immortalwrt/packages.git" > feeds.conf
          echo "src-git luci https://github.com/immortalwrt/luci.git" >> feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp -r "$SRC_DIR" package/luci-app-tailscale
          
          cat > .config <<EOF
          CONFIG_TARGET_PACKAGING_APK=y
          CONFIG_PACKAGE_luci-app-tailscale=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-tw=m
          # CONFIG_ALL_KMODS is not set
          EOF
          
          make defconfig
          make package/luci-app-tailscale/{clean,compile} V=s -j2 IGNORE_ERRORS=m
          make package/feeds/luci/luci-i18n-tailscale-zh-cn/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          make package/feeds/luci/luci-i18n-tailscale-zh-tw/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          
          mkdir -p ../out-apk
          find bin/packages -type f -name "luci-app-tailscale*.apk" -exec cp -v {} ../out-apk/ \;
          find bin/packages -type f -name "luci-i18n-tailscale*.apk" -exec cp -v {} ../out-apk/ \;
          
      - name: "6️⃣ 打印 APK SDK 产物"
        if: steps.version.outputs.skip != 'true'
        run: |
          echo "=== APK SDK 编译产物 ==="
          ls -lh out-apk || true
          
      # =========================
      # ImmortalWrt 24.10 SDK (ipk)
      # =========================
      - name: "7️⃣ 下载 ImmortalWrt 24.10 SDK (ipk)"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          SDK_URL="https://downloads.immortalwrt.org/releases/24.10.0/targets/x86/64/immortalwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          curl -LO "$SDK_URL"
          tar --use-compress-program=unzstd -xf "$(basename "$SDK_URL")"
          SDK_DIR_RAW=$(find . -maxdepth 1 -type d -name "immortalwrt-sdk-*" -print -quit)
          mv "$SDK_DIR_RAW" immortalwrt-sdk-ipk
          echo "SDK_DIR_IPK=$PWD/immortalwrt-sdk-ipk" >> $GITHUB_ENV
          
      - name: "8️⃣ 配置并编译（ImmortalWrt 24.10 SDK → ipk）"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          cd "$SDK_DIR_IPK"
          echo "src-git packages https://github.com/immortalwrt/packages.git" > feeds.conf
          echo "src-git luci https://github.com/immortalwrt/luci.git" >> feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp -r "$SRC_DIR" package/luci-app-tailscale
          
          cat > .config <<EOF
          CONFIG_PACKAGE_luci-app-tailscale=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-cn=m
          CONFIG_PACKAGE_luci-i18n-tailscale-zh-tw=m
          # CONFIG_ALL_KMODS is not set
          EOF
          
          make defconfig
          make package/luci-app-tailscale/{clean,compile} V=s -j2 IGNORE_ERRORS=m
          make package/feeds/luci/luci-i18n-tailscale-zh-cn/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          make package/feeds/luci/luci-i18n-tailscale-zh-tw/{clean,compile} V=s -j2 IGNORE_ERRORS=m || true
          
          mkdir -p ../out-ipk
          find bin/packages -type f -name "luci-app-tailscale*.ipk" -exec cp -v {} ../out-ipk/ \;
          find bin/packages -type f -name "luci-i18n-tailscale*.ipk" -exec cp -v {} ../out-ipk/ \;
          
      - name: "9️⃣ 打印 IPK SDK 产物"
        if: steps.version.outputs.skip != 'true'
        run: |
          echo "=== IPK SDK 编译产物 ==="
          ls -lh out-ipk || true
          
      # =========================
      # 汇总 & 发布（加过滤）
      # =========================
      - name: "🔟 汇总产物并过滤"
        if: steps.version.outputs.skip != 'true'
        run: |
          set -e
          mkdir -p out
          
          for file in out-apk/*; do
            filename=$(basename "$file")
            if [[ "$filename" == luci-app-tailscale* ]] || [[ "$filename" == luci-i18n-tailscale* ]]; then
              cp -v "$file" out/
            fi
          done
          
          for file in out-ipk/*; do
            filename=$(basename "$file")
            if [[ "$filename" == luci-app-tailscale* ]] || [[ "$filename" == luci-i18n-tailscale* ]]; then
              cp -v "$file" out/
            fi
          done
          
          echo ""
          echo "=== 最终产物（已过滤 lib*, kmod-*, tailscale 主程序）==="
          ls -lh out/

      # ✅ 新增：生成构建时间
      - name: "📅 生成构建时间"
        if: steps.version.outputs.skip != 'true'
        id: build_time
        run: |
          BUILD_TIME=$(TZ=Asia/Shanghai date +"%Y-%m-%d %H:%M:%S CST")
          echo "time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "构建时间: $BUILD_TIME"

      - name: "1️⃣1️⃣ 发布到 GitHub Release"
        if: steps.version.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.version.outputs.tag }}"
          name: "luci-app-tailscale ${{ steps.version.outputs.version }}（ImmortalWrt 主线 APK + 24.10 IPK）"
          files: "out/*"
          body: |
            ## 📦 包含文件
            - **APK 格式**：ImmortalWrt 主线（新版 apk 包管理器）
            - **IPK 格式**：ImmortalWrt 24.10（传统 opkg 包管理器）

            ## 🔧 持久化配置
            - 数据路径：`/etc/config/tailscale-data`

            ## 📥 安装方法
            ```bash
            # APK 方式（ImmortalWrt 主线）
            apk add --allow-untrusted luci-app-tailscale*.apk

            # IPK 方式（ImmortalWrt 24.10 及以下）
            opkg install luci-app-tailscale*.ipk
            ```

            ## 📌 版本信息
            - 上游版本: ${{ steps.version.outputs.tag }}
            - 构建时间: ${{ steps.build_time.outputs.time }}

            ## ⚠️ 注意事项
            - 仅包含 LuCI 界面插件
            - 不含依赖库和 Tailscale 主程序
            - 依赖请从系统源安装

      - name: "1️⃣2️⃣ 同步到 Gitee Release"
        if: steps.version.outputs.skip != 'true'
        continue-on-error: true
        run: |
          chmod +x .github/scripts/release-gitee.sh
          .github/scripts/release-gitee.sh \
            "whzhni/luci-app-tailscale" \
            "${{ secrets.GITEE_TOKEN }}" \
            "${{ steps.version.outputs.tag }}" \
            "${{ steps.version.outputs.version }}" \
            "${{ steps.build_time.outputs.time }}" \
            "${{ github.repository }}" \
            "luci-app-lucky"
