name: "自动构建 Tailscale（持久化版，标准命名 IPK/APK 与语言包）"

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      need_build: ${{ steps.check.outputs.need_build }}
      latest_version: ${{ steps.check.outputs.latest_version }}

    steps:
      - name: "1️⃣ 检出代码"
        uses: actions/checkout@v4

      - name: "2️⃣ 检查上游版本更新"
        id: check
        run: |
          set -e
          upstream=$(curl -s "https://api.github.com/repos/asvow/luci-app-tailscale/releases/latest" \
            | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "获取失败")
          current=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" 2>/dev/null \
            | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "v0.0.0")

          echo "上游版本: $upstream"
          echo "当前版本: $current"

          if [ "$upstream" != "$current" ] && [ "$upstream" != "获取失败" ]; then
            echo "need_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=$upstream" >> $GITHUB_OUTPUT
          else
            echo "need_build=false" >> $GITHUB_OUTPUT
            echo "latest_version=$current" >> $GITHUB_OUTPUT
          fi

      - name: "3️⃣ 准备 OpenWrt SDK"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          SDK_URL="https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/openwrt-sdk-22.03.5-x86-64_gcc-11.2.0_musl.Linux-x86_64.tar.xz"
          echo "下载 SDK: $SDK_URL"
          curl -LO "$SDK_URL"

          echo "解压 SDK..."
          tar -xJf "$(basename "$SDK_URL")"

          echo "=== 当前目录结构 ==="
          ls -l

          # 自动检测解压出来的目录并转为绝对路径
          SDK_DIR=$(realpath $(find . -maxdepth 1 -type d -name "openwrt-sdk-*"))
          echo "检测到 SDK_DIR=$SDK_DIR"

          cd "$SDK_DIR"
          echo "进入 SDK 目录: $(pwd)"
          echo "=== SDK 子目录结构 ==="
          ls -l

          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf
          echo "src-git telephony https://git.openwrt.org/feed/telephony.git" >> feeds.conf

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          git clone https://github.com/asvow/luci-app-tailscale package/luci-app-tailscale
          sed -i '/\/etc\/init\.d\/tailscale/d;/\/etc\/config\/tailscale/d;' feeds/packages/net/tailscale/Makefile

          echo "=== package 目录结构 ==="
          ls -l package

      - name: "4️⃣ 替换路径为持久化目录"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          echo "准备进入源码目录: $SDK_DIR/package/luci-app-tailscale"
          ls -l "$SDK_DIR/package" || true

          cd "$SDK_DIR/package/luci-app-tailscale"

          SOURCE="/etc/tailscale"
          TARGET="/etc/config/tailscale-data"

          find . -type f -exec grep -Il "${SOURCE}" {} \; | while read -r f; do
            echo "修改文件: $f"
            sed -i "s|${SOURCE}|${TARGET}|g" "$f"
          done

          echo "=== 替换完成后再次检查 ==="
          grep -RIl "${TARGET}" . || echo "警告：未发现新路径"

      - name: "5️⃣ 生成 .config 并启用 APK 与语言包"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          cd "$SDK_DIR"
          {
            echo "CONFIG_ALL_KMODS=y"
            echo "CONFIG_ALL=y"
            echo "CONFIG_TARGET_PACKAGING_APK=y"
            echo "CONFIG_LUCI_LANG_zh-cn=y"
            echo "CONFIG_LUCI_LANG_zh-tw=y"
            echo "CONFIG_PACKAGE_luci=y"
            echo "CONFIG_PACKAGE_liblucihttp=y"
            echo "CONFIG_PACKAGE_liblucihttp-ucode=y"
            echo "CONFIG_PACKAGE_luci-app-tailscale=y"
            echo "CONFIG_PACKAGE_luci-i18n-tailscale-zh-cn=y"
            echo "CONFIG_PACKAGE_luci-i18n-tailscale-zh-tw=y"
          } > .config
          make defconfig

      - name: "6️⃣ 编译 luci-app-tailscale 与语言包"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          cd "$SDK_DIR"
          make package/luci-app-tailscale/compile V=s || make package/luci-app-tailscale/compile V=s
          make package/feeds/luci/luci-i18n-tailscale-zh-cn/compile V=s || true
          make package/feeds/luci/luci-i18n-tailscale-zh-tw/compile V=s || true

      - name: "7️⃣ 收集并重命名产物"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        id: artifacts
        run: |
          set -e
          cd "$SDK_DIR"
          VER="${{ steps.check.outputs.latest_version }}"
          OUT_DIR="${PWD}/out"
          mkdir -p "$OUT_DIR"

          find bin -type f -name "luci-app-tailscale_*_all.ipk" -exec cp -v {} "$OUT_DIR/" \;
          find bin -type f -name "luci-i18n-tailscale-zh-cn_*_all.ipk" -exec cp -v {} "$OUT_DIR/" \;
          find bin -type f -name "luci-i18n-tailscale-zh-tw_*_all.ipk" -exec cp -v {} "$OUT_DIR/" \;
          find bin -type f -name "luci-app-tailscale-*-*.apk" -exec cp -v {} "$OUT_DIR/luci-app-tailscale-${VER}-r1.apk" \;
          find bin -type f -name "luci-i18n-tailscale-zh-cn-*-*.apk" -exec cp -v {} "$OUT_DIR/luci-i18n-tailscale-zh-cn-${VER}.apk" \;
          find bin -type f -name "luci-i18n-tailscale-zh-tw-*-*.apk" -exec cp -v {} "$OUT_DIR/luci-i18n-tailscale-zh-tw-${VER}.apk" \;

          echo "OUT_DIR=$OUT_DIR" >> $GITHUB_OUTPUT

      - name: "8️⃣ 发布前检查"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        run: |
          set -e
          ls -lh "${{ steps.artifacts.outputs.OUT_DIR }}" || exit 1
          cnt=$(ls "${{ steps.artifacts.outputs.OUT_DIR }}" | wc -l)
          echo "产物数量: $cnt"
          if [ "$cnt" -eq 0 ]; then
            exit 1
          fi

      - name: "9️⃣ 发布到 Releases"
        if: ${{ steps.check.outputs.need_build == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.check.outputs.latest_version }}-persistent"
          name: "luci-app-tailscale ${{ steps.check.outputs.latest_version }} (持久化配置版)"
          files: "${{ steps.artifacts.outputs.OUT_DIR }}/*"
          body: |
            - 构建方式：OpenWrt SDK
            - 持久化路径：/etc/config/tailscale-data
            - 产物包含：
              * luci-app-tailscale_<ver>_all.ipk
              * luci-app-tailscale-<ver>-r1.apk（若 SDK 支持 APK）
              * luc
